vim /etc/ansible/ansible.cfg

callback_whitelist = profile_tasks, timer

yum install bash-completion bash-completion-extras

yum install python-openstackclient

#workaround if openstack complete doesn't work
sudo ln -s /usr/lib/python2.7/site-packages/magnumclient /usr/lib/python2.7/site-packages/magclient

openstack complete | sudo tee /etc/bash_completion.d/osc.bash_completion > /dev/null

########################
 
docker_volume_id=$(openstack volume create --size 15 master-0-docker-volume)
10970dba-4219-4b2d-a7e3-d8061e52d232

openstack volume create --size 30 master-0-openshiftlocal-volume
3cc40aa8-05af-44e7-88a9-1583cd81cb22

openstack volume create --size 25 master-0-etcd-volume
6f09491c-4842-41ff-be47-9eae7ee0898c

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.master \
  --image centos \
  --key-name server \
  --security-group master-sg \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/master-0.yml \
  --block-device-mapping vdb=10970dba-4219-4b2d-a7e3-d8061e52d232:volume:15:false \
  --block-device-mapping vdc=3cc40aa8-05af-44e7-88a9-1583cd81cb22:volume:30:false \
  --block-device-mapping vdd=6f09491c-4842-41ff-be47-9eae7ee0898c:volume:25:false \
  --wait \
  master-0.$domain
  
#########################[ infra ]

openstack volume create --size 15 infra-node-0-docker-volume
545aa4d8-8f1c-412c-9cb4-c61c38b5e980

openstack volume create --size 30 infra-node-0-openshiftlocal-volume
70ccaa90-dcf1-48d2-8718-88fec89ce81f

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.node \
  --image centos \
  --key-name server \
  --security-group 1bc19031-2a23-40c0-9cb0-fd5ca75d7d4d \
  --security-group infra-sg \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/infra-node-0.yml \
  --block-device-mapping vdb=545aa4d8-8f1c-412c-9cb4-c61c38b5e980:volume:15:false \
  --block-device-mapping vdc=70ccaa90-dcf1-48d2-8718-88fec89ce81f:volume:30:false \
  --wait \
  infra-node-0.$domain

#########################[ app ]

openstack volume create --size 15 app-node-0-docker-volume
6d409971-e117-4f8a-9ee3-e8bfb58933cb

openstack volume create --size 30 app-node-0-openshiftlocal-volume
93c953a6-fd40-4467-bbca-ef6e06596344

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.node \
  --image centos \
  --key-name server \
  --security-group 1bc19031-2a23-40c0-9cb0-fd5ca75d7d4d \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/app-node-0.yml \
  --block-device-mapping vdb=6d409971-e117-4f8a-9ee3-e8bfb58933cb:volume:15:false \
  --block-device-mapping vdc=93c953a6-fd40-4467-bbca-ef6e06596344:volume:30:false \
  --wait \
  app-node-0.$domain

floating ip

192.168.1.31
192.168.1.32
192.168.1.33

m1.small

network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2)

for instance in ldap ansible;
do
  openstack server create \
    --image centos7 \
    --flavor m1.small \
    --key-name server \
    --nic net-id=$network_id \
    --security-group=$security_group_id \
    $instance;
done

1. Install OpenLDAP Server / Enable Service

yum -y install vim openldap-servers openldap-clients
cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
chown ldap. /var/lib/ldap/DB_CONFIG
systemctl start slapd
systemctl enable slapd

2. Set OpenLDAP admin password.

# generate encrypted password:

slappasswd

51270300
{SSHA}xhnp96neG73bbadYDnZBrdTobWRm8kDt

vim chrootpw.ldif

# specify the password generated above for "olcRootPW" section
dn: olcDatabase={0}config,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}xhnp96neG73bbadYDnZBrdTobWRm8kDt

ldapadd -Y EXTERNAL -H ldapi:/// -f chrootpw.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={0}config,cn=config"

3. Import basic Schemas.

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=cosine,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=nis,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=inetorgperson,cn=schema,cn=config"

4. Set your domain name on LDAP DB.

# generate directory manager's password

slappasswd

	New password: 76970300
	Re-enter new password:
	
	{SSHA}+3dRA+Gr0TIdSDFRBY6zUy55iXDUgrm+
	
vim chdomain.ldif

# replace to your own domain name for "dc=***,dc=***" section
# specify the password generated above for "olcRootPW" section 
dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=srv,dc=world" read by * none

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}+3dRA+Gr0TIdSDFRBY6zUy55iXDUgrm+

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by dn="cn=Manager,dc=srv,dc=world" write by anonymous auth by self write by * none
olcAccess: {1}to dn.base="" by * read
olcAccess: {2}to * by dn="cn=Manager,dc=srv,dc=world" write by * read

ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={1}monitor,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

vim basedomain.ldif

# replace to your own domain name for "dc=***,dc=***" section 
dn: dc=srv,dc=world
objectClass: top
objectClass: dcObject
objectclass: organization
o: Server World
dc: srv

dn: cn=Manager,dc=srv,dc=world
objectClass: organizationalRole
cn: Manager
description: Directory Manager

dn: ou=People,dc=srv,dc=world
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=srv,dc=world
objectClass: organizationalUnit
ou: Group

ldapadd -x -D cn=Manager,dc=srv,dc=world -W -f basedomain.ldif

	Enter LDAP Password: # directory manager's password
	
	adding new entry "dc=srv,dc=world"

	adding new entry "cn=Manager,dc=srv,dc=world"

	adding new entry "ou=People,dc=srv,dc=world"

	adding new entry "ou=Group,dc=srv,dc=world"
	
5. If Firewalld is running, allow LDAP service. LDAP uses 389/TCP.

firewall-cmd --add-service=ldap --permanent 

firewall-cmd --reload

##########################

New User

vim monica.ldif

dn: uid=monica,ou=People,dc=srv,dc=world
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: monica
uid: monica
uidNumber: 16859
gidNumber: 100
homeDirectory: /home/monica
loginShell: /bin/bash
gecos: monica
userPassword: {crypt}x
shadowLastChange: 0
shadowMax: 0
shadowWarning: 0

ldapadd -x -W -D "cn=Manager,dc=srv,dc=world" -f monica.ldif

ldappasswd -s teste123 -W -D "cn=Manager,dc=srv,dc=world" -x "uid=monica,ou=People,dc=srv,dc=world"

ldapsearch -x -W -D "cn=Manager,dc=srv,dc=world" -b "uid=monica,ou=People,dc=srv,dc=world" "(objectclass=*)"

vim monica-modify.ldif

dn: uid=monica,ou=People,dc=srv,dc=world
changetype: modify
replace: shadowMax
shadowMax: -1

ldapmodify -x -W -D "cn=Manager,dc=srv,dc=world" -H ldap:// -f monica-modify.ldif

##########################

LDAP Client

1. Install OpenLDAP Client

yum -y install \
 vim \
 openldap-clients \
 nss-pam-ldapd

# ldapserver=(LDAP server's hostname or IP address)
# ldapbasedn="dc=(your own domain name)"

authconfig --enableldap \
--enableldapauth \
--ldapserver=dlp.srv.world \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

authconfig --enableldap \
--enableldapauth \
--ldapserver=192.168.1.40 \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

vim /etc/ssh/sshd_config

PasswordAuthentication yes

reboot

2. If SELinux is enabled, it needs to add a rule to allow creating home directories automatically by mkhomedir.

vi mkhomedir.te

# create new

module mkhomedir 1.0;

require {
        type unconfined_t;
        type oddjob_mkhomedir_exec_t;
        class file entrypoint;
}

#============= unconfined_t ==============
allow unconfined_t oddjob_mkhomedir_exec_t:file entrypoint;

[root@www ~]# checkmodule -m -M -o mkhomedir.mod mkhomedir.te 
checkmodule: loading policy configuration from mkhomedir.te
checkmodule: policy configuration loaded
checkmodule: writing binary representation (version 17) to mkhomedir.mod

[root@www ~]# semodule_package --outfile mkhomedir.pp --module mkhomedir.mod 

[root@www ~]# semodule -i mkhomedir.pp 

########################################################################################################

1. Create a VirtualBox Machine

CPU............: 2
Memory.........: 4 GB
Disk (VDI).....: 15 GB
ISO............: CentOS-7-x86_64-Minimal-1804.iso
Network Bridge.: Internet Access

yum -y update && \
yum -y install acpid && \
systemctl enable acpid && \
yum -y install cloud-init && \
yum -y install cloud-utils-growpart && \
systemctl stop firewalld && \
systemctl disable firewalld && \
echo "NOZEROCONF=yes" >> /etc/sysconfig/network && \
sed -i 's/rhgb quiet/console=tty0 console=ttyS0,115200n8/g' /etc/default/grub && \
grub2-mkconfig -o /boot/grub2/grub.cfg && \
sed -i '/^UUID/d' /etc/sysconfig/network-scripts/ifcfg-enp0s3 && \
yum clean all && \
rm -rf /var/cache/yum

poweroff

#copy to nuc

qemu-img convert -f vdi centos7.vdi -O qcow2 centos7.qcow2

openstack image create \
  --public \
  --disk-format qcow2 \
  --min-disk 15 \
  --min-ram 512 \
  --file centos7.qcow2 \
  centos7
  
rm -rf ~/.ssh/known_hosts

openstack server delete sftp
  
network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
openstack server create \
  --image centos7 \
  --flavor m1.small \
  --key-name server \
  --nic net-id=$network_id \
  --security-group=$security_group_id \
  --wait \
  sftp

openstack server add floating ip sftp 192.168.1.40

##########################################

vim keystonerc_admin

export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export OS_PASSWORD=xxxxxxxxxx
export OS_AUTH_URL=http://192.168.1.127:5000/v2.0/
export PS1='[\u@\h \W(keystone_admin)]\$ '

export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_PROJECT_NAME=lab
export OS_IDENTITY_API_VERSION=3
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_AUTH_URL=http://192.168.1.101:5000/v3
export PS1='[\u@\h \W(admin)]\$ '

sftp-creation.yml
---
- hosts: openstack

  tasks:

  - name: remove known_hosts
    file: 
      path: ~/.ssh/known_hosts
      state: absent
  
  - name: creating instance
    shell: >
      source ~/keystonerc_admin && export OS_PROJECT_NAME=lab && \
      network_id=$(openstack network show lab_network -f value -c id) && \
      security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
      openstack server create \
        --image centos7 \
        --flavor m1.small \
        --key-name server \
        --nic net-id=$network_id \
        --security-group=$security_group_id \
        --wait \
        sftp && \    
      openstack server add floating ip sftp 192.168.1.40
  
  - name: wait for SSH on each created instance
    command: >
      ssh -oBatchMode=yes -oStrictHostKeyChecking=no
      centos@192.168.1.40 true
    register: result
    until: result|success
    retries: 30
    delay: 10

sftp-role.yml
---
- hosts: lab
  roles:
    - role: sftp
	
sftp.yml
---
- import_playbook: sftp-creation.yml
- import_playbook: sftp-role.yml
