USB Boot Pendrive using RUFUS

Bios Setup boot order

Select Time Zone

Language (add Portuguese/Brazil)

Network Device Connectivity

Disk Setup

/boot 256 MiB
/boot/efi 256 MiB
/swap 16 GiB
/home 20 GiB ext4
/ 900 GiB

root password (keep it)

reboot

log in as root

lsblk

NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0 978.1G  0 disk
+-sda1   8:1    0   256M  0 part /boot/efi
+-sda2   8:2    0   256M  0 part /boot
+-sda3   8:3    0 943.1G  0 part /
+-sda4   8:4    0    20G  0 part /home
+-sda5   8:5    0  14.5G  0 part [SWAP]

localectl

localectl list-locales

localectl set-locale LANG=pt_BR.utf8

localectl list-keymaps

localectl set-keymap

yum update -y

hostnamectl set-hostname openstack.example.com

reboot

ssh-copy-id root@ip_address

yum install vim -y

vim /etc/sysconfig/network-scripts/ifcfg-eno1

BOOTPROTO=static
IPADDR=192.168.1.101
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
DNS1=192.168.1.1
DNS2=1.1.1.1
DNS3=8.8.8.8

yum install epel-release -y

yum install ansible -y

scp -r ./osp/ root@192.168.1.101:~

cd /root/pack-your-lab/openstack

ansible.cfg
callback_whitelist = profile_tasks, timer

ansible -i hosts.yml -m ping osp

openstack.example.com | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

# Prepara o NUC para Instalar o OpenStack usando o PackStack
ansible-playbook -i hosts.yml install.yml

##########################################################################################################################################################################################

[root@ocp-master ~]# htpasswd -c /etc/origin/master/htpasswd admin

oc adm policy add-cluster-role-to-user cluster-admin admin

oc login

openstack volume show openshift-registry -c id -f value

cat <<EOT >> hosts
app0.example.com
app1.example.com
infra0.example.com
infra1.example.com
master0.example.com
haproxy.example.com
EOT

echo 192.168.1.6 > hosts

ansible 192.168.1.6 -b -i hosts -m ping

ansible 192.168.1.6 -b -i hosts -m command -a "ls /etc/yum.repos.d/"

ansible 192.168.1.6 -b -i hosts -m command -a "ls /etc/pki/rpm-gpg/"

ansible 192.168.1.6 -b -i hosts -m file -a "path='/etc/yum.repos.d/' state='absent'"

ansible 192.168.1.6 -b -i hosts -m file -a "path='/etc/pki/rpm-gpg/' state='absent'"

ansible 192.168.1.6 -b -i hosts -m copy -a "src='/etc/yum.repos.d/' dest='/etc/yum.repos.d/'"

ansible 192.168.1.6 -b -i hosts -m copy -a "src='/etc/pki/rpm-gpg/' dest='/etc/pki/rpm-gpg/'"

ansible 192.168.1.6 -b -i hosts -m command -a "yum repolist"

ansible 192.168.1.6 -b -i hosts -m yum -a "name='*' state='latest'"

ssh -A centos@192.168.1.6

sudo su -

cat <<EOT >> hosts
app0.example.com
app1.example.com
infra0.example.com
infra1.example.com
master0.example.com
haproxy.example.com
EOT

ansible all -b -i hosts -m command -a "ls /etc/yum.repos.d/"

ansible all -b -i hosts -m command -a "ls /etc/pki/rpm-gpg/"

ansible all -b -i hosts -m file -a "path='/etc/yum.repos.d/' state='absent'"

ansible all -b -i hosts -m file -a "path='/etc/pki/rpm-gpg/' state='absent'"

ansible all -b -i hosts -m copy -a "src='/etc/yum.repos.d/' dest='/etc/yum.repos.d/'"

ansible all -b -i hosts -m copy -a "src='/etc/pki/rpm-gpg/' dest='/etc/pki/rpm-gpg/'"

ansible all -b -i hosts -m command -a "yum repolist"

ansible all -b -i hosts -m yum -a "name='*' state='latest'"

ansible all -b -i hosts -m ping

ansible all -b -i ~/hosts -m command -a "systemctl status firewalld" | grep "Active:"

ansible all -b -i ~/hosts -m systemd -a "name=firewalld state=stopped enabled=no"

ansible all -b -i ~/hosts -m yum -a "name='*' state=latest"

ansible all -b -i ~/hosts -m yum -a "name='epel-release' state=latest"

ansible all -b -i ~/hosts -m command -a "yum repolist"

ansible all -b -i ~/hosts -m yum -a "name='net-tools' state=latest"

ansible all -b -i ~/hosts -m yum -a "name='*' state=latest"

ansible all -b -i ~/hosts -m shell -a "hostname"

ansible haproxy.example.com -b -i ~/hosts -m yum -a "name=haproxy state=latest"

ansible all -b -i ~/hosts -m shell -a "ping master0.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping master1.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping master2.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping app0.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping infra0.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping haproxy.example.com -c 1"
ansible all -b -i ~/hosts -m shell -a "ping linux.com -c 1"

ansible all -b -i ~/hosts -m shell -a "sestatus"
ansible all -b -i ~/hosts -m shell -a "setenforce 0"

https://github.com/openshift/openshift-ansible/tree/master/inventory

vim hosts.cfg

# copy hosts.tests.ini

cd ~ && \
git clone https://github.com/openshift/openshift-ansible && \ 
cd openshift-ansible && \
git fetch --all --tags --prune && \
git checkout tags/openshift-ansible-3.9.30-1 -b 3.9 && \
cd ~ && \
ansible all -b -i ~/hosts.cfg -m ping

ansible all -b -i ~/hosts.cfg -m shell -a "lsblk"

ansible all -b -i ~/hosts.cfg -m command -a "yum repolist"

ansible all -b -i ~/hosts.cfg -m yum -a "name='epel-release' state=latest"

ansible all -b -i ~/hosts.cfg -m yum -a "name='*' state=latest"

ansible all -b -i ~/hosts.cfg -m shell -a "journalctl -xe"

ansible-playbook -i ~/hosts.cfg ~/openshift-ansible/playbooks/prerequisites.yml

ansible-playbook -i  ~/hosts.cfg ~/openshift-ansible/playbooks/deploy_cluster.yml

ansible-playbook -i  ~/hosts.cfg ~/openshift-ansible/playbooks/adhoc/uninstall.yml

journalctl -b -u origin-node

##################################################################################################################################

vim /etc/ansible/ansible.cfg

callback_whitelist = profile_tasks, timer

yum install bash-completion bash-completion-extras

yum install python-openstackclient

#workaround if openstack complete doesn't work
sudo ln -s /usr/lib/python2.7/site-packages/magnumclient /usr/lib/python2.7/site-packages/magclient

openstack complete | sudo tee /etc/bash_completion.d/osc.bash_completion > /dev/null

########################

domain=example.com && \
public_network_id=$(openstack network show public_network -f value -c id) && \
public_subnet_id=$(openstack subnet show public_subnet -c id -f value) && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
lab_subnet_id=$(openstack subnet show lab_subnet -c id -f value) && \
default_security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2)

vim /etc/neutron/plugins/ml2/ml2_conf.ini

# add
extension_drivers=port_security

openstack subnet show lab_subnet -c dns_nameservers

openstack subnet set \
  --no-dns-nameservers \
  --dns-nameserver 192.168.1.1 \
  --dns-nameserver 8.8.8.8 \
  lab_subnet

openstack port list -c ID -c Name -c Status -c "Fixed IP Addresses" --sort-column "Fixed IP Addresses"

openstack port create \
  --no-security-group \
  --disable-port-security \
  --fixed-ip subnet=$lab_subnet_id,ip-address=10.0.0.2 \
  --network $lab_network_id \
  dns-port
  
openstack floating ip create \
  --port=dns-port \
  --floating-ip-address=192.168.1.2 \
  public_network
  
openstack server create \
  --nic port-id=dns-port \
  --flavor ocp.test \
  --image centos7 \
  --key-name server \
  --security-group $default_security_group_id \
  --wait \
  dns.$domain
  
openstack subnet set \
  --no-dns-nameservers \
  --dns-nameserver 192.168.1.2 \
  lab_subnet

openstack port create \
  --no-security-group \
  --disable-port-security \
  --fixed-ip subnet=$lab_subnet_id,ip-address=10.0.0.6 \
  --network $lab_network_id \
  bastion-port
  
openstack floating ip create \
  --port=bastion-port \
  --floating-ip-address=192.168.1.6 \
  public_network

openstack server create \
  --nic port-id=bastion-port \
  --flavor ocp.test \
  --image centos \
  --key-name server \
  --security-group $default_security_group_id \
  --wait \
  bastion.$domain
  
openstack port create \
  --no-security-group \
  --disable-port-security \
  --fixed-ip subnet=$lab_subnet_id,ip-address=10.0.0.5 \
  --network $lab_network_id \
  haproxy-port
  
openstack floating ip create \
  --port=haproxy-port \
  --floating-ip-address=192.168.1.5 \
  public_network

openstack server create \
  --nic port-id=haproxy-port \
  --flavor ocp.test \
  --image centos7 \
  --key-name server \
  --security-group $default_security_group_id \
  --wait \
  haproxy.$domain

for volume in $(openstack volume list -c Name -f value);
do
  openstack volume delete $volume;
done

openstack volume list

cd ~/pack-your-lab/openstack/

example.com.        300 IN SOA dns.example.com.
admin.example.com. 16 28800 3600 604800 86400
example.com.           300 IN NS dns.example.com.
app0.example.com.      300 IN A <internal-net-IP>   10.0.0.50
app1.example.com.      300 IN A <internal-net-IP>   10.0.0.51
*.apps.example.com.    300 IN A <infra0-public-IP>  192.168.1.40
*.apps.example.com.    300 IN A <infra1-public-IP>  192.168.1.41
*.apps.example.com.    300 IN A <infra2-public-IP>  192.168.1.42
bastion.example.com.   300 IN A <internal-net-IP>   192.168.1.6
dns.example.com.       300 IN A <public-IP>         192.168.1.2
haproxy.example.com.   300 IN A <public-IP>         192.168.1.5
infra0.example.com.    300 IN A <internal-net-IP>   10.0.0.40
infra1.example.com.    300 IN A <internal-net-IP>   10.0.0.41
infra2.example.com.    300 IN A <internal-net-IP>   10.0.0.42
master0.example.com.   300 IN A <internal-net-IP>   10.0.0.30
master1.example.com.   300 IN A <internal-net-IP>   10.0.0.31
master2.example.com.   300 IN A <internal-net-IP>   10.0.0.32
openshift.example.com. 300 IN A <haproxy-public-IP> 192.168.1.5
example.com.           300 IN SOA dns.example.com.
admin.example.com. 16 28800 3600 604800 86400

openstack floating ip list -c "Floating IP Address" -c "Fixed IP Address" -c Port --sort-column "Floating IP Address"

+---------------------+------------------+--------------------------------------+
| Floating IP Address | Fixed IP Address | Port                                 |
+---------------------+------------------+--------------------------------------+
| 192.168.1.2         | 10.0.0.2         | 2ce06fee-c986-4b45-b71f-1a3764ee3b0a |
| 192.168.1.30        | None             | None                                 |
| 192.168.1.31        | None             | None                                 |
| 192.168.1.32        | None             | None                                 |
| 192.168.1.40        | 10.0.0.40        | f3cbd883-a881-49e6-b26e-916ff1d2fef7 |
| 192.168.1.41        | 10.0.0.41        | 75d5d028-31e2-4f3a-b4cc-6bcd79a123ce |
| 192.168.1.5         | 10.0.0.5         | 67a1f3cb-c057-4ead-b2f3-83ec981a4868 |
| 192.168.1.50        | None             | None                                 |
| 192.168.1.51        | None             | None                                 |
| 192.168.1.6         | 10.0.0.6         | 89cde14b-c541-49ea-9dd8-e7f3ad4e28d0 |
+---------------------+------------------+--------------------------------------+

openstack port list -c ID -c Name -c Status -c "Fixed IP Addresses" --sort-column "Fixed IP Addresses"

+--------------------------------------+--------------+--------+-----------------------------------------------------------------------------+
| ID                                   | Name         | Status | Fixed IP Addresses                                                          |
+--------------------------------------+--------------+--------+-----------------------------------------------------------------------------+
| 642e7700-459f-4581-9b65-4d74a5132e98 |              | ACTIVE | ip_address='10.0.0.1', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'     |
| 39aac3f1-06bf-47f9-afe5-be5b44682ab9 |              | ACTIVE | ip_address='10.0.0.10', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| 2ce06fee-c986-4b45-b71f-1a3764ee3b0a | dns-port     | DOWN   | ip_address='10.0.0.2', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'     |
| 8c088d51-ae3b-4a42-916e-24d7540490fe | master0-port | DOWN   | ip_address='10.0.0.30', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| b68e1096-58ad-4616-9581-ed07bd8181d2 | master1-port | DOWN   | ip_address='10.0.0.31', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| 17dcfc6c-01bd-4cc9-baf4-9ad96d66d50f | master2-port | DOWN   | ip_address='10.0.0.32', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| f3cbd883-a881-49e6-b26e-916ff1d2fef7 | infra0-port  | DOWN   | ip_address='10.0.0.40', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| 75d5d028-31e2-4f3a-b4cc-6bcd79a123ce | infra1-port  | DOWN   | ip_address='10.0.0.41', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| 67a1f3cb-c057-4ead-b2f3-83ec981a4868 | haproxy-port | DOWN   | ip_address='10.0.0.5', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'     |
| 8e56e100-9c59-4723-b908-cec04e3d1907 | app0-port    | DOWN   | ip_address='10.0.0.50', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| cedd57da-5639-4892-8053-3e5175ad6f06 | app1-port    | DOWN   | ip_address='10.0.0.51', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'    |
| 89cde14b-c541-49ea-9dd8-e7f3ad4e28d0 | bastion-port | DOWN   | ip_address='10.0.0.6', subnet_id='1106bb24-7d19-4e3b-bc14-866c82659d2a'     |
| a3d992df-b7a6-4244-a2dc-5501efa33919 |              | N/A    | ip_address='192.168.1.2', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2'  |
| 0b01e3c3-8475-415c-a34b-448f050ddc47 |              | ACTIVE | ip_address='192.168.1.20', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| e1365b2d-1d10-4fb7-bd59-6979f39a2d93 |              | ACTIVE | ip_address='192.168.1.29', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 8c7893db-d699-4723-98e5-fee8a6cbf557 |              | N/A    | ip_address='192.168.1.30', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| e4899ce0-ba21-4141-90ff-b93302ef90ae |              | N/A    | ip_address='192.168.1.31', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 6a655d40-82c2-4c45-b743-3ecbf5de101a |              | N/A    | ip_address='192.168.1.32', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 4f984c89-fb29-4f34-811f-57dd571b63d0 |              | N/A    | ip_address='192.168.1.40', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 180a35e1-3f35-47da-af4e-041588f9054d |              | N/A    | ip_address='192.168.1.41', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 70905ffc-c1fa-4ca8-a049-b17c2026a87f |              | N/A    | ip_address='192.168.1.5', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2'  |
| 7afacdb9-c6d0-4d6a-9492-f4175b673490 |              | N/A    | ip_address='192.168.1.50', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 4714f438-a1f0-45b7-aae5-3dad3c58df31 |              | N/A    | ip_address='192.168.1.51', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2' |
| 81de9555-00ea-4448-b4b9-89c0190ba2d2 |              | N/A    | ip_address='192.168.1.6', subnet_id='1dbc195d-0d07-499e-86a5-6c8d8267d4f2'  |
+--------------------------------------+--------------+--------+-----------------------------------------------------------------------------+

for instance_number in {0..2};
do
  private_ip=10.0.0.3$instance_number && \
  floating_ip=192.168.1.3$instance_number && \
  port_name=master$instance_number-port && \
  openstack port create \
    --no-security-group \
    --disable-port-security \
    --fixed-ip subnet=$lab_subnet_id,ip-address=$private_ip \
    --network $lab_network_id \
    $port_name;
done

for instance_number in {0..1};
do
  private_ip=10.0.0.4$instance_number && \
  floating_ip=192.168.1.4$instance_number && \
  port_name=infra$instance_number-port && \
  openstack port create \
    --no-security-group \
    --disable-port-security \
    --fixed-ip subnet=$lab_subnet_id,ip-address=$private_ip \
    --network $lab_network_id \
    $port_name && \
  openstack floating ip set \
    --port=$port_name \
    $floating_ip;
done

for instance_number in {0..1};
do
  private_ip=10.0.0.5$instance_number && \
  port_name=app$instance_number-port && \
  openstack port create \
    --no-security-group \
    --disable-port-security \
    --fixed-ip subnet=$lab_subnet_id,ip-address=$private_ip \
    --network $lab_network_id \
    $port_name && \
done

for instance_number in {0..1};
do
  instance_name=master && instance_sequence=$instance_number && \
  instance=$instance_name$instance_sequence && \
  openstack volume create --size 15 $instance-docker-volume && \
  docker_volume_id=$(openstack volume show $instance-docker-volume -c id -f value) && \
  openstack volume create --size 30 $instance-openshiftlocal-volume && \
  openshiftlocal_volume_id=$(openstack volume show $instance-openshiftlocal-volume -c id -f value) && \
  openstack volume create --size 25 $instance-etcd-volume && \
  etcd_volume_id=$(openstack volume show $instance-etcd-volume -c id -f value) && \
  openstack server create \
    --nic port-id=$instance-port \
    --flavor ocp.master-tiny \
    --image centos7 \
    --key-name server \
    --security-group $default_security_group_id \
    --user-data=./config/servers/cloud-init/$instance.yml \
    --block-device-mapping vdb=$docker_volume_id:volume:15:false \
    --block-device-mapping vdc=$openshiftlocal_volume_id:volume:30:false \
    --block-device-mapping vdd=$etcd_volume_id:volume:25:false \
    --wait \
    $instance.$domain;
done

for instance_number in {0..0};
do
  instance_name=infra && instance_sequence=$instance_number && \
  private_ip=10.0.0.4$instance_number && \
  floating_ip=192.168.1.4$instance_number && \
  instance=$instance_name$instance_sequence && \
  openstack volume create --size 15 $instance-docker-volume && \
  docker_volume_id=$(openstack volume show $instance-docker-volume -c id -f value) && \
  openstack volume create --size 30 $instance-openshiftlocal-volume && \
  openshiftlocal_volume_id=$(openstack volume show $instance-openshiftlocal-volume -c id -f value) && \
  lab_network_id=$(openstack network show lab_network -f value -c id) && \
  openstack server create \
    --nic port-id=$instance-port \
    --flavor ocp.node \
    --image centos7 \
    --key-name server \
    --security-group $default_security_group_id \
    --user-data=./config/servers/cloud-init/$instance.yml \
    --block-device-mapping vdb=$docker_volume_id:volume:15:false \
    --block-device-mapping vdc=$openshiftlocal_volume_id:volume:30:false \
    --wait \
    $instance.$domain;
done

for instance_number in {0..0};
do
  instance_name=app && instance_sequence=$instance_number && \
  private_ip=10.0.0.5$instance_number && \
  floating_ip=192.168.1.5$instance_number && \
  instance=$instance_name$instance_sequence && \
  openstack volume create --size 15 $instance-docker-volume && \
  docker_volume_id=$(openstack volume show $instance-docker-volume -c id -f value) && \
  openstack volume create --size 30 $instance-openshiftlocal-volume && \
  openshiftlocal_volume_id=$(openstack volume show $instance-openshiftlocal-volume -c id -f value) && \
  lab_network_id=$(openstack network show lab_network -f value -c id) && \
  openstack server create \
    --nic port-id=$instance-port \
    --flavor ocp.node \
    --image centos7 \
    --key-name server \
    --security-group $default_security_group_id \
    --user-data=./config/servers/cloud-init/$instance.yml \
    --block-device-mapping vdb=$docker_volume_id:volume:15:false \
    --block-device-mapping vdc=$openshiftlocal_volume_id:volume:30:false \
    --wait \
    $instance.$domain;
done

cd ~

#DNS

ssh centos@192.168.1.2

vim /etc/sysconfig/network-scripts/ifcfg-eth0

PEERDNS=no
DNS1=192.168.1.2

# Connect to the Bastion Instance

exec ssh-agent bash

ssh-add ~/.ssh/id_rsa

vim ~/.ssh/sshd_config

Host bastion
    HostName 192.168.1.6
    User centos
    IdentityFile ~/.ssh/id_rsa
    FowardAgent yes
	
cat <<EOT >> hosts
dns.example.com
EOT

###################################### OpenLDAP

network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2)

for instance in ldap ansible;
do
  openstack server create \
    --image centos7 \
    --flavor m1.small \
    --key-name server \
    --nic net-id=$network_id \
    --security-group=$security_group_id \
    $instance;
done

1. Install OpenLDAP Server / Enable Service

yum -y install vim openldap-servers openldap-clients
cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
chown ldap. /var/lib/ldap/DB_CONFIG
systemctl start slapd
systemctl enable slapd

2. Set OpenLDAP admin password.

# generate encrypted password:

slappasswd

51270300
{SSHA}xhnp96neG73bbadYDnZBrdTobWRm8kDt

vim chrootpw.ldif

# specify the password generated above for "olcRootPW" section
dn: olcDatabase={0}config,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}xhnp96neG73bbadYDnZBrdTobWRm8kDt

ldapadd -Y EXTERNAL -H ldapi:/// -f chrootpw.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={0}config,cn=config"

3. Import basic Schemas.

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=cosine,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=nis,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=inetorgperson,cn=schema,cn=config"

4. Set your domain name on LDAP DB.

# generate directory manager's password

slappasswd

	New password: 76970300
	Re-enter new password:
	
	{SSHA}+3dRA+Gr0TIdSDFRBY6zUy55iXDUgrm+
	
vim chdomain.ldif

# replace to your own domain name for "dc=***,dc=***" section
# specify the password generated above for "olcRootPW" section 
dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=srv,dc=world" read by * none

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}+3dRA+Gr0TIdSDFRBY6zUy55iXDUgrm+

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by dn="cn=Manager,dc=srv,dc=world" write by anonymous auth by self write by * none
olcAccess: {1}to dn.base="" by * read
olcAccess: {2}to * by dn="cn=Manager,dc=srv,dc=world" write by * read

ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={1}monitor,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

vim basedomain.ldif

# replace to your own domain name for "dc=***,dc=***" section 
dn: dc=srv,dc=world
objectClass: top
objectClass: dcObject
objectclass: organization
o: Server World
dc: srv

dn: cn=Manager,dc=srv,dc=world
objectClass: organizationalRole
cn: Manager
description: Directory Manager

dn: ou=People,dc=srv,dc=world
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=srv,dc=world
objectClass: organizationalUnit
ou: Group

ldapadd -x -D cn=Manager,dc=srv,dc=world -W -f basedomain.ldif

	Enter LDAP Password: # directory manager's password
	
	adding new entry "dc=srv,dc=world"

	adding new entry "cn=Manager,dc=srv,dc=world"

	adding new entry "ou=People,dc=srv,dc=world"

	adding new entry "ou=Group,dc=srv,dc=world"
	
5. If Firewalld is running, allow LDAP service. LDAP uses 389/TCP.

firewall-cmd --add-service=ldap --permanent 

firewall-cmd --reload

##########################

New User

vim monica.ldif

dn: uid=monica,ou=People,dc=srv,dc=world
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: monica
uid: monica
uidNumber: 16859
gidNumber: 100
homeDirectory: /home/monica
loginShell: /bin/bash
gecos: monica
userPassword: {crypt}x
shadowLastChange: 0
shadowMax: 0
shadowWarning: 0

ldapadd -x -W -D "cn=Manager,dc=srv,dc=world" -f monica.ldif

ldappasswd -s teste123 -W -D "cn=Manager,dc=srv,dc=world" -x "uid=monica,ou=People,dc=srv,dc=world"

ldapsearch -x -W -D "cn=Manager,dc=srv,dc=world" -b "uid=monica,ou=People,dc=srv,dc=world" "(objectclass=*)"

vim monica-modify.ldif

dn: uid=monica,ou=People,dc=srv,dc=world
changetype: modify
replace: shadowMax
shadowMax: -1

ldapmodify -x -W -D "cn=Manager,dc=srv,dc=world" -H ldap:// -f monica-modify.ldif

##########################

LDAP Client

1. Install OpenLDAP Client

yum -y install \
 vim \
 openldap-clients \
 nss-pam-ldapd

# ldapserver=(LDAP server's hostname or IP address)
# ldapbasedn="dc=(your own domain name)"

authconfig --enableldap \
--enableldapauth \
--ldapserver=dlp.srv.world \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

authconfig --enableldap \
--enableldapauth \
--ldapserver=192.168.1.40 \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

vim /etc/ssh/sshd_config

PasswordAuthentication yes

reboot

2. If SELinux is enabled, it needs to add a rule to allow creating home directories automatically by mkhomedir.

vi mkhomedir.te

# create new

module mkhomedir 1.0;

require {
        type unconfined_t;
        type oddjob_mkhomedir_exec_t;
        class file entrypoint;
}

#============= unconfined_t ==============
allow unconfined_t oddjob_mkhomedir_exec_t:file entrypoint;

[root@www ~]# checkmodule -m -M -o mkhomedir.mod mkhomedir.te 
checkmodule: loading policy configuration from mkhomedir.te
checkmodule: policy configuration loaded
checkmodule: writing binary representation (version 17) to mkhomedir.mod

[root@www ~]# semodule_package --outfile mkhomedir.pp --module mkhomedir.mod 

[root@www ~]# semodule -i mkhomedir.pp 

########################################################################################################

1. Create a VirtualBox Machine

CPU............: 2
Memory.........: 4 GB
Disk (VDI).....: 15 GB
ISO............: CentOS-7-x86_64-Minimal-1804.iso
Network Bridge.: Internet Access

yum -y update && \
yum -y install vim telnet bind-utils && \
yum -y install acpid && \
systemctl enable acpid && \
yum -y install cloud-init && \
yum -y install cloud-utils-growpart && \
systemctl stop firewalld && \
systemctl disable firewalld && \
echo "NOZEROCONF=yes" >> /etc/sysconfig/network && \
sed -i 's/rhgb quiet/console=tty0 console=ttyS0,115200n8/g' /etc/default/grub && \
grub2-mkconfig -o /boot/grub2/grub.cfg && \
sed -i '/^UUID/d' /etc/sysconfig/network-scripts/ifcfg-enp0s3 && \
yum clean all && \
rm -rf /var/cache/yum

poweroff

#copy to nuc

qemu-img convert -f vdi centos7.vdi -O qcow2 centos7.qcow2

openstack image create \
  --public \
  --disk-format qcow2 \
  --min-disk 15 \
  --min-ram 512 \
  --file centos7.qcow2 \
  centos
  
rm -rf ~/.ssh/known_hosts

openstack server delete sftp
  
network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
openstack server create \
  --image centos7 \
  --flavor m1.small \
  --key-name server \
  --nic net-id=$network_id \
  --security-group=$security_group_id \
  --wait \
  sftp

openstack server add floating ip sftp 192.168.1.40

##########################################

vim keystonerc_admin

export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export OS_PASSWORD=xxxxxxxxxx
export OS_AUTH_URL=http://192.168.1.127:5000/v2.0/
export PS1='[\u@\h \W(keystone_admin)]\$ '

export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_PROJECT_NAME=lab
export OS_IDENTITY_API_VERSION=3
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_AUTH_URL=http://192.168.1.101:5000/v3
export PS1='[\u@\h \W(admin)]\$ '

sftp-creation.yml
---
- hosts: openstack

  tasks:

  - name: remove known_hosts
    file: 
      path: ~/.ssh/known_hosts
      state: absent
  
  - name: creating instance
    shell: >
      source ~/keystonerc_admin && export OS_PROJECT_NAME=lab && \
      network_id=$(openstack network show lab_network -f value -c id) && \
      security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
      openstack server create \
        --image centos7 \
        --flavor m1.small \
        --key-name server \
        --nic net-id=$network_id \
        --security-group=$security_group_id \
        --wait \
        sftp && \    
      openstack server add floating ip sftp 192.168.1.40
  
  - name: wait for SSH on each created instance
    command: >
      ssh -oBatchMode=yes -oStrictHostKeyChecking=no
      centos@192.168.1.40 true
    register: result
    until: result|success
    retries: 30
    delay: 10

sftp-role.yml
---
- hosts: lab
  roles:
    - role: sftp
	
sftp.yml
---
- import_playbook: sftp-creation.yml
- import_playbook: sftp-role.yml

###############################################################

openstack port create \
  --network $lab_network_id \
  --fixed-ip subnet=$lab_subnet_id,ip-address=10.0.0.70 \
  --no-security-group \
  --disable-port-security \
  sftp-port
  
openstack floating ip create \
  --floating-ip-address 192.168.1.70 \
  --port sftp-port \
  public_network

openstack server create \
  --flavor m1.small \
  --image centos \
  --security-group $default_security_group_id \
  --key-name server \
  --port sftp-port \
  --wait \
  sftp

echo 192.168.1.70 > hosts

ansible 192.168.1.70 -b -i hosts -m ping
