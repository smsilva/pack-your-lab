lsblk

vim /etc/ansible/ansible.cfg

callback_whitelist = profile_tasks, timer

eval $(openstack server show dns -f shell -c id) && \ 
openstack server delete $id --wait && \
eval $(openstack server show ntp -f shell -c id) && \
openstack server delete $id --wait && \
openstack security group delete dns-security-group && \
rm -rf ~/.ssh/known_hosts

ansible-playbook -i hosts.yml config/lab-servers.yml

yum install bash-completion bash-completion-extras

yum install python-openstackclient

#workaround if openstack complete doesn't work
sudo ln -s /usr/lib/python2.7/site-packages/magnumclient /usr/lib/python2.7/site-packages/magclient

openstack complete | sudo tee /etc/bash_completion.d/osc.bash_completion > /dev/null

for i in 0 1 2
do
	curl -v http://infra-node-$i.internal.ocp3.example.org
	curl -v -k https://infra-node-$i.internal.ocp3.example.org
	curl -v -k https://master-$i.internal.ocp3.example.org:8443
done

$ curl -v http://localhost
$ curl -v -k http://localhost:443
$ curl -v -k http://localhost:8443

########################

security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
netid=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --image centos \
  --flavor m1.small \
  --key-name server \
  --nic net-id=$netid \
  --security-group $security_group_id \
  --wait \
  master-1

#######################[ master ]
 
openstack volume create --size 15 master-0-docker-volume
10970dba-4219-4b2d-a7e3-d8061e52d232

openstack volume create --size 30 master-0-openshiftlocal-volume
3cc40aa8-05af-44e7-88a9-1583cd81cb22

openstack volume create --size 25 master-0-etcd-volume
6f09491c-4842-41ff-be47-9eae7ee0898c

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.master \
  --image centos \
  --key-name server \
  --security-group master-sg \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/master-0.yml \
  --block-device-mapping vdb=10970dba-4219-4b2d-a7e3-d8061e52d232:volume:15:false \
  --block-device-mapping vdc=3cc40aa8-05af-44e7-88a9-1583cd81cb22:volume:30:false \
  --block-device-mapping vdd=6f09491c-4842-41ff-be47-9eae7ee0898c:volume:25:false \
  --wait \
  master-0.$domain
  
#########################[ infra ]

openstack volume create --size 15 infra-node-0-docker-volume
545aa4d8-8f1c-412c-9cb4-c61c38b5e980

openstack volume create --size 30 infra-node-0-openshiftlocal-volume
70ccaa90-dcf1-48d2-8718-88fec89ce81f

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.node \
  --image centos \
  --key-name server \
  --security-group 1bc19031-2a23-40c0-9cb0-fd5ca75d7d4d \
  --security-group infra-sg \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/infra-node-0.yml \
  --block-device-mapping vdb=545aa4d8-8f1c-412c-9cb4-c61c38b5e980:volume:15:false \
  --block-device-mapping vdc=70ccaa90-dcf1-48d2-8718-88fec89ce81f:volume:30:false \
  --wait \
  infra-node-0.$domain

#########################[ app ]

openstack volume create --size 15 app-node-0-docker-volume
6d409971-e117-4f8a-9ee3-e8bfb58933cb

openstack volume create --size 30 app-node-0-openshiftlocal-volume
93c953a6-fd40-4467-bbca-ef6e06596344

domain=internal.ocp3.example.org && \
lab_network_id=$(openstack network show lab_network -f value -c id) && \
openstack server create \
  --nic net-id=$lab_network_id \
  --flavor ocp.node \
  --image centos \
  --key-name server \
  --security-group 1bc19031-2a23-40c0-9cb0-fd5ca75d7d4d \
  --security-group node-sg \
  --user-data=./config/servers/cloud-init/app-node-0.yml \
  --block-device-mapping vdb=6d409971-e117-4f8a-9ee3-e8bfb58933cb:volume:15:false \
  --block-device-mapping vdc=93c953a6-fd40-4467-bbca-ef6e06596344:volume:30:false \
  --wait \
  app-node-0.$domain

floating ip

192.168.1.31
192.168.1.32
192.168.1.33

m1.small

network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2)

for instance in ldap ansible nginx-{0..1};
do
  openstack server create \
    --image centos \
    --flavor m1.small \
    --key-name server \
    --nic net-id=$network_id \
    --security-group=$security_group_id \
    $instance;
done

network_id=$(openstack network show lab_network -f value -c id) && \
security_group_id=$(openstack security group list --project lab | grep "Default security group" | cut -d " " -f 2) && \
openstack server create \
  --image centos \
  --flavor m1.small \
  --key-name server \
  --nic net-id=$network_id \
  --security-group=$security_group_id \
  ldap

1. Install OpenLDAP Server / Enable Service

yum -y install openldap-servers openldap-clients
cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
chown ldap. /var/lib/ldap/DB_CONFIG
systemctl start slapd
systemctl enable slapd

2. Set OpenLDAP admin password.

# generate encrypted password:

slappasswd

{SSHA}SbxbugMpYCHhK8YAwQVegpTqxPbO3XbW (51270300)

vi chrootpw.ldif

# specify the password generated above for "olcRootPW" section
dn: olcDatabase={0}config,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}SbxbugMpYCHhK8YAwQVegpTqxPbO3XbW

ldapadd -Y EXTERNAL -H ldapi:/// -f chrootpw.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={0}config,cn=config"

3. Import basic Schemas.

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=cosine,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=nis,cn=schema,cn=config"

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	adding new entry "cn=inetorgperson,cn=schema,cn=config"

4. Set your domain name on LDAP DB.

# generate directory manager's password

slappasswd

	New password: 76970300
	Re-enter new password:
	{SSHA}rRTqFcQD3g7cJ+5j4dELZRMdjIkd3QsU
	
vi chdomain.ldif

# replace to your own domain name for "dc=***,dc=***" section
# specify the password generated above for "olcRootPW" section 
dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=srv,dc=world" read by * none

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=srv,dc=world

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}rRTqFcQD3g7cJ+5j4dELZRMdjIkd3QsU

dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by dn="cn=Manager,dc=srv,dc=world" write by anonymous auth by self write by * none
olcAccess: {1}to dn.base="" by * read
olcAccess: {2}to * by dn="cn=Manager,dc=srv,dc=world" write by * read

ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif

	SASL/EXTERNAL authentication started
	SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
	SASL SSF: 0
	modifying entry "olcDatabase={1}monitor,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

	modifying entry "olcDatabase={2}hdb,cn=config"

vi basedomain.ldif

# replace to your own domain name for "dc=***,dc=***" section 
dn: dc=srv,dc=world
objectClass: top
objectClass: dcObject
objectclass: organization
o: Server World
dc: srv

dn: cn=Manager,dc=srv,dc=world
objectClass: organizationalRole
cn: Manager
description: Directory Manager

dn: ou=People,dc=srv,dc=world
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=srv,dc=world
objectClass: organizationalUnit
ou: Group

ldapadd -x -D cn=Manager,dc=srv,dc=world -W -f basedomain.ldif

	Enter LDAP Password: # directory manager's password
	
	adding new entry "dc=srv,dc=world"

	adding new entry "cn=Manager,dc=srv,dc=world"

	adding new entry "ou=People,dc=srv,dc=world"

	adding new entry "ou=Group,dc=srv,dc=world"
	
5. If Firewalld is running, allow LDAP service. LDAP uses 389/TCP.

firewall-cmd --add-service=ldap --permanent 

firewall-cmd --reload

##########################

slappasswd

New User

rm -rf adam.ldif

vim adam.ldif

dn: uid=adam,ou=People,dc=srv,dc=world
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: adam
uid: adam
uidNumber: 16859
gidNumber: 100
homeDirectory: /home/adam
loginShell: /bin/bash
gecos: adam
userPassword: {crypt}x
shadowLastChange: 0
shadowMax: -1
shadowWarning: 0

ldapadd -x -W -D "cn=Manager,dc=srv,dc=world" -f adam.ldif
ldapadd -x -W -D "cn=Manager,dc=srv,dc=world" -f adam.ldif

ldappasswd -s teste123 -W -D "cn=Manager,dc=srv,dc=world" -x "uid=adam,ou=People,dc=srv,dc=world"

ldapsearch -x -W -D "cn=Manager,dc=srv,dc=world" -b "uid=adam,ou=People,dc=srv,dc=world" "(objectclass=*)"

vim adam-modify.ldif

dn: uid=adam,ou=People,dc=srv,dc=world
changetype: modify
replace: shadowMax
shadowMax: -1

ldapmodify -x -W -D "cn=Manager,dc=srv,dc=world" -H ldap:// -f adam-modify.ldif

##########################

LDAP Client

1. Install OpenLDAP Client

yum -y install openldap-clients nss-pam-ldapd

# ldapserver=(LDAP server's hostname or IP address)
# ldapbasedn="dc=(your own domain name)"

authconfig --enableldap \
--enableldapauth \
--ldapserver=dlp.srv.world \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

authconfig --enableldap \
--enableldapauth \
--ldapserver=192.168.1.32 \
--ldapbasedn="dc=srv,dc=world" \
--enablemkhomedir \
--update

exit 
logout
CentOS Linux 7 (Core)
Kernel 3.10.0-123.20.1.el7.x86_64 on an x86_64
www login: redhat # LDAP user
Password:# password
Creating directory '/home/redhat'.
[redhat@www ~]$ # logined normally [redhat@www ~]$ passwd# try to change the LDAP password
Changing password for user redhat.
Enter login(LDAP) password: # current password
New password: # new password
Retype new password:
LDAP password information changed for redhat
passwd: all authentication tokens updated successfully.
[2]	If SELinux is enabled, it needs to add a rule to allow creating home directories automatically by mkhomedir.
[root@www ~]# vi mkhomedir.te
# create new
module mkhomedir 1.0;

require {
        type unconfined_t;
        type oddjob_mkhomedir_exec_t;
        class file entrypoint;
}

#============= unconfined_t ==============
allow unconfined_t oddjob_mkhomedir_exec_t:file entrypoint;

[root@www ~]# checkmodule -m -M -o mkhomedir.mod mkhomedir.te 
checkmodule: loading policy configuration from mkhomedir.te
checkmodule: policy configuration loaded
checkmodule: writing binary representation (version 17) to mkhomedir.mod
[root@www ~]# semodule_package --outfile mkhomedir.pp --module mkhomedir.mod 
[root@www ~]# semodule -i mkhomedir.pp 

##########################

It is very easy to convert a VirtualBox .vdi disk images to KVM qcow2 file. You have to use the RAW file format as an intermediate.

1 – Make sure the VirtualBox machine is shutdown.

2 – Convert the vdi to a raw disk images. Note: vdi are compressed and raw images are not and so you will need to leave enough disk space for entire uncompressed disk.

C:\Program Files\Oracle\VirtualBox

VBoxManage clonehd --format RAW c:\temp\vbox\centos7.vdi c:\temp\vbox\centos7.img

3 – Then on your KVM host:

qemu-img convert -f raw vm.img -O qcow2 vm.qcow2
Hope this is helpful.

